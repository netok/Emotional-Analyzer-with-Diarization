from fastapi import FastAPI, UploadFile, File
from fastapi.responses import FileResponse, JSONResponse
from typing import List
import shutil
import os
from logic.pipeline import process_pipeline
from logic.file_utils import save_uploaded_files, create_zip_archive

app = FastAPI(title="Call Analysis API", description="–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º –∏ –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π")

UPLOAD_DIR = "uploads"
OUTPUT_DIR = "output"
ZIP_RESULT = "result.zip"


@app.get("/info")
def get_info():
    return {
        "project": "üéô Emotional Analyzer with Diarization",
        "description": (
            "API –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. "
            "–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏–∫–µ—Ä—Å–∫—É—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é, —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∞—É–¥–∏–æ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º, "
            "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–æ–≤.\n\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ "
            "–ï–¥–∏–Ω–æ–≥–æ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –¶–µ–Ω—Ç—Ä–∞ –î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–æ–≥–æ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ (–î–í–§–£)."
        ),
        "authors": [
            "–®–æ—Ä–æ—Ö–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω",
            "–î–º–∏—Ç—Ä–∏–π –ë–µ–ª–æ–≤"
        ],
        "technologies": [
            "Whisper (ASR)",
            "Pyannote (speaker diarization)",
            "reverb_v2 pipeline",
            "GigaAMEmoAnalyzer (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)",
            "pydub, librosa, ffmpeg (–∞—É–¥–∏–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞)",
            "PDF/Excel –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤"
        ],
        "pipeline_steps": [
            "1. –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤ —Å–ø–∏–∫–µ—Ä–æ–≤",
            "2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–∏—à–∏–Ω—ã –≤ –ø–∞—É–∑–∞—Ö",
            "3. –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –Ω–∞ –∫–∞–∂–¥–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ —Å–ø–∏–∫–µ—Ä–æ–≤",
            "4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á—ë—Ç–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–≤–æ–Ω–∫—É",
            "5. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π Excel-—Ç–∞–±–ª–∏—Ü—ã 'callset_summary.xlsx'"
        ],
        "endpoints": [
            {
                "path": "/info",
                "method": "GET",
                "description": "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º API, –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
            },
            {
                "path": "/process",
                "method": "POST",
                "description": (
                    "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã. "
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —è–≤–ª—è—é—Ç—Å—è —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º, "
                    "–∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π, –∏ –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã."
                )
            }
        ],
        "input_format": {
            "type": "multipart/form-data",
            "description": "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤",
            "expected": [
                "*.mp3 ‚Äî –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤",
                "*.txt ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º"
            ]
        },
        "output_format": {
            "type": "application/zip",
            "description": "ZIP-–∞—Ä—Ö–∏–≤ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:",
            "contents": [
                "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã (*.txt)",
                "–ê—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ø–∏–∫–µ—Ä—É (*.mp3)",
                "PDF –æ—Ç—á—ë—Ç—ã —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —ç–º–æ—Ü–∏–π (*.pdf)",
                "–û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –∑–≤–æ–Ω–∫–∞–º ‚Äî callset_summary.xlsx"
            ]
        }
    }



@app.post("/process")
def process_files(files: List[UploadFile] = File(...)):
    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    if os.path.exists(UPLOAD_DIR): shutil.rmtree(UPLOAD_DIR)
    if os.path.exists(OUTPUT_DIR): shutil.rmtree(OUTPUT_DIR)
    os.makedirs(UPLOAD_DIR, exist_ok=True)
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    save_uploaded_files(files, UPLOAD_DIR)

    try:
        # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
        process_pipeline(upload_dir=UPLOAD_DIR, output_dir=OUTPUT_DIR)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        create_zip_archive(OUTPUT_DIR, ZIP_RESULT)
        return FileResponse(ZIP_RESULT, filename="result.zip", media_type="application/zip")
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})